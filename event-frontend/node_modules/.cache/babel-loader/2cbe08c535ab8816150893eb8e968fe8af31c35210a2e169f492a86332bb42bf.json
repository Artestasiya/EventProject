{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\event-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// context/AuthContext.js\n\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const loginUser = userData => {\n    // ����� ����� ���������� API ������ ��� ������\n    return new Promise((resolve, reject) => {\n      // ������ mock-������\n      if (userData.email === \"test@test.com\" && userData.password === \"password123\") {\n        setUser(userData);\n        resolve(userData); // �������� ����\n      } else {\n        reject(\"�������� ����� ��� ������\"); // ������\n      }\n    });\n  };\n  const logoutUser = () => {\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loginUser","userData","Promise","resolve","reject","email","password","logoutUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Work/event-frontend/src/context/AuthContext.js"],"sourcesContent":["// context/AuthContext.js\r\n\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    const loginUser = (userData) => {\r\n        // ����� ����� ���������� API ������ ��� ������\r\n        return new Promise((resolve, reject) => {\r\n            // ������ mock-������\r\n            if (userData.email === \"test@test.com\" && userData.password === \"password123\") {\r\n                setUser(userData);\r\n                resolve(userData); // �������� ����\r\n            } else {\r\n                reject(\"�������� ����� ��� ������\"); // ������\r\n            }\r\n        });\r\n    };\r\n\r\n    const logoutUser = () => {\r\n        setUser(null);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, loginUser, logoutUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMW,SAAS,GAAIC,QAAQ,IAAK;IAC5B;IACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC;MACA,IAAIH,QAAQ,CAACI,KAAK,KAAK,eAAe,IAAIJ,QAAQ,CAACK,QAAQ,KAAK,aAAa,EAAE;QAC3EP,OAAO,CAACE,QAAQ,CAAC;QACjBE,OAAO,CAACF,QAAQ,CAAC,CAAC,CAAC;MACvB,CAAC,MAAM;QACHG,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC;MACzC;IACJ,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACrBR,OAAO,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,oBACIR,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEX,IAAI;MAAEE,SAAS;MAAEO;IAAW,CAAE;IAAAX,QAAA,EACxDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAChB,GAAA,CAzBWF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}